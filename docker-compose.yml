version: "3.4"

services:
  # Bitwarden保险库
  vaultwarden:
    image: vaultwarden/server:latest
    networks:
      - network_cluster
    volumes:
      - nfs_vaultwarden:/data
    environment:
      - SIGNUPS_ALLOWED=false
      - INVITATIONS_ALLOWED=false
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}    
    restart: always
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.vaultwarden.rule=Host(`vaultwarden.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.vaultwarden.entrypoints=websecure"
        - "traefik.http.routers.vaultwarden.service=vaultwarden"
        - "traefik.http.routers.vaultwarden.middlewares=noauth-chain@file"
        - "traefik.http.services.vaultwarden.loadbalancer.server.port=80"     
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == vm
          - node.labels.database == true

  # Docker私有库
  registry:
    image: registry
    networks:
      - network_cluster
    restart: always
    ports:
      # 内网直接访问端口
      - 5000:5000
    environment:
      REGISTRY_PROXY_REMOTEURL: ${REGISTRY_PROXY_REMOTEURL}
      REGISTRY_PROXY_USERNAME: ${REGISTRY_PROXY_USERNAME}
      REGISTRY_PROXY_PASSWORD: ${REGISTRY_PROXY_PASSWORD}
    volumes:
      - nfs_registry:/var/lib/registry     
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.registry.rule=Host(`registry.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.registry.entrypoints=websecure"
        - "traefik.http.routers.registry.service=registry"
        - "traefik.http.routers.registry.middlewares=noauth-chain@file,cors-headers@file" # registryui访问需要CORS标头
        - "traefik.http.services.registry.loadbalancer.server.port=5000"     
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == vm
          - node.labels.storage == true

  # Docker私有库Manager
  registryadmin:
    image: snagles/docker-registry-manager:latest
    command: ["/app/app","-r","/app/conf/registries.yml"]
    networks: 
      - network_cluster
    environment:
      - MANAGER_PORT=8080
      # NFS挂载卷不支持文件映射，只支持目录映射
      # 通过命令行更改/app/registries.yml的默认位置为/app/conf/registries.yml
      #- MANAGER_REGISTRIES=/app/conf/registries.yml
      - MANAGER_LOG_LEVEL=warn
    volumes:
      - nfs_registryadmin:/app/conf
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.registryadmin.rule=Host(`registryadmin.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.registryadmin.entrypoints=websecure"
        - "traefik.http.routers.registryadmin.service=registryadmin"
        - "traefik.http.routers.registryadmin.middlewares=auth-chain@file"
        - "traefik.http.services.registryadmin.loadbalancer.server.port=8080"      
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == vm
          - node.labels.storage == true

  # Docker私有库UI
  registryui:
    image: joxit/docker-registry-ui:latest
    networks: 
      - network_cluster
    environment:
      - DELETE_IMAGES=true
      - REGISTRY_TITLE=Swarm Registry
      - NGINX_PROXY_PASS_URL=https://registry.${DOMAIN_SWARM}:4
      - SINGLE_REGISTRY=true    
    volumes:
      # Portainer Stack生成的容器环境变量有问题，无法正确更新90-docker-registry-ui.sh
      # 挂载卷用以手工替换/docker-entrypoint.d/90-docker-registry-ui.sh中的环境变量
      - nfs_registryui:/docker-entrypoint.d
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.registryui.rule=Host(`registryui.${DOMAIN_SWARM}`)"
        - "traefik.http.routers.registryui.entrypoints=websecure"
        - "traefik.http.routers.registryui.service=registryui"
        - "traefik.http.routers.registryui.middlewares=auth-chain@file"
        - "traefik.http.services.registryui.loadbalancer.server.port=80" 
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.labels.type == vm
          - node.labels.storage == true

networks:
  network_cluster:
    external: true
     
x-common-keys-volume: &common-keys-volume
  type: nfs
  o: addr=${NFS_SERVER},rw,nfsvers=4
  
volumes:
  nfs_vaultwarden:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/storage/vaultwarden/data
  nfs_registry:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/storage/registry
  nfs_registryadmin:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/storage/docker-registry-manager/conf
  nfs_registryui:
    driver: local
    driver_opts:
      <<: *common-keys-volume
      device: :${NFS_DEVICE}/storage/docker-registry-ui/sh
